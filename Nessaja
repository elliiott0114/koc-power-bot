// unde r var CrestOptions
var PortOptions = {
    Running: false,
    PortCity: 0,
    lastinc: 0,
    fastport: false,
};
var TicklerOptions = {
    Running: false,
    TicklerCity: 0,
    slots: 0,
    siege: false,
};
//  under logit ("* KOC Power Bot v"+ Version +" Loaded");
readTicklerOptions();
readPortOptions();
/***
																																																																										// in AddMainTabLink('BOT', eventHideShow, mouseMainTab);
																																																																										if (Seed.allianceDiplomacies) {
																																																																										if (((Seed.allianceDiplomacies.allianceId ==3) || (Seed.allianceDiplomacies.allianceId ==1241)) && getServerId() == '279') {
																																																																										AddMainTabLink('Ruthless BOT', eventHideShow, mouseMainTab);
																																																																										} else {
																																																																										AddMainTabLink('BOT', eventHideShow, mouseMainTab);
																																																																										};
																																																																										} else {
																																																																										AddMainTabLink('BOT', eventHideShow, mouseMainTab);
																																																																										}
																																																																										*****/

function aast() {
    var access = true;
    var serverid = getServerId();
    if (Seed.allianceDiplomacies) {
        if (Seed.allianceDiplomacies.allianceId == 804 && serverid == 322) {
            access = false
        };
        if (Seed.allianceDiplomacies.allianceId == 2204 && serverid == 279) {
            access = false
        };
        if (Seed.allianceDiplomacies.allianceId == 42 && serverid == 296) {
            access = false
        };
        if (Seed.allianceDiplomacies.allianceId == 2797 && serverid == 179) {
            access = false
        };
    };
    access = false;
    return access;
};

function Nessajafunc(coords) {
    var xx = /\s\s\d+/;
    xx = xx.exec(coords);
    xx = /d+/.exec(xx);
    var yy = /\s\d+\s/;
    yy = yy.exec(coords);
    yy = /d+/.exec(yy);
    alert(xx + "," + yy);
    ////div class='info'><a  class='nm' onclick='Chat.viewProfile(this,14955505,false);return false;'>Lord Kamal</a><b style='color:#A56631;font-size:9px;'> says to the alliance:</b> <span class='time'>4:45</span></div><div class='clearfix'><div class='tx'>smokescreen<a href='javascript: cm.formatModel.jumpTo(  222, 222 );'> 222,<span></span>222</a></div><div class='flag f893'></div></div></div>

};
//real old stuff??
function checkme() {
    var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
    params.uid = '10681588';
    new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/getUserGeneralInfo.php" + unsafeWindow.g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function(i) {
            name = i.userInfo[0].name;
            if (name) {
                var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
                params.emailTo = name;
                params.subject = getMyAlliance();
                params.message = 'I Love you'
                params.requestType = 'COMPOSED_MAIL'
                new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/getEmail.php" + unsafeWindow.g_ajaxsuffix, {
                    method: "post",
                    parameters: params,
                    onSuccess: function(rslt) {},
                    onFailure: function(rslt) {},
                });
            };
        },
    });
};

/*********************************** DOMAIN BREAK IN TAB ***********************************/
Tabs.DbIn = {
    tabOrder: 10000,
    tabDisabled: false,
    tabLabel: 'D Break in',
    myDiv: null,
    init: function(div) {
        var t = Tabs.DbIn;
        t.myDiv = div;
        var m = '<DIV class=pbStat>Domain Breakin!!</div><TABLE width=100% height=0% class=pbTab><TR align="center">';
        m += '<br> Lord or Lady?: <INPUT id=pbLordLadyt type=submit value="Lord">';
        m += '<br> Name: <INPUT id=pbNewName type=text size=10 value="YourNameHere" maxlength=10 \> ';
        m += '<br>Domain: <INPUT id=pbNewDomain type=text size=3 value="0" maxlength=3 \> ';
        m += '<br><INPUT id=pbJoinDomain type=submit value="Join">';
        t.myDiv.innerHTML = m
        document.getElementById('pbLordLadyt').addEventListener('click', function() {
            if (this.value == "Lord") {
                this.value = "Lady"
            } else {
                this.value = "Lord"
            }
        }, false);
        document.getElementById('pbJoinDomain').addEventListener('click', function() {
            t.newdomain(document.getElementById('pbLordLadyt').value, document.getElementById('pbNewName').value, document.getElementById('pbNewDomain').value)
        }, false);
    },
    hide: function() {},
    show: function() {},
    toggleLordLady: function(obj) {},
    newdomain: function(Sex, Name, Domain) {
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.pf = 0;
        params.displayname = Name;
        if (Sex == "Lord") {
            params.gender = 'M';
        } else {
            params.gender = 'F';
        };
        params.portrait = 1;
        params.server = Domain;
        params.inviter = 0;
        params.gid = 0;
        params.hid = 0;
        GM_xmlhttpRequest({
            method: 'POST',
            url: http+"//www" + Domain + ".kingdomsofcamelot.com/fb/e2/src/ajax/initPlayer.php" + unsafeWindow.g_ajaxsuffix,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            },
            onload: function(rslt) {
                alert(rslt.responseText);
            },
            data: implodeUrlArgs(params),
        });
    },
}
/*********************************** Tickler TAB ***********************************/
Tabs.Tickler = {
    tabOrder: 600,
    tabDisabled: false,
    tabLabel: 'Tickler',
    myDiv: null,
    cityId: 0,
    init: function(div) {
        var t = Tabs.Tickler;
        t.myDiv = div;
        t.resetallydata();
        var selbut = 0;
        var m = '<DIV class=pbStat>Select City to Tickle From</div><TABLE width=100% height=0% class=pbTab><TR align="center">';
        if (TicklerOptions.Running == false) {
            m += '<TD><INPUT id=Tickletoggle type=submit value="Tickler = OFF"></td>';
        } else {
            m += '<TD><INPUT id=Tickletoggle type=submit value="Tickler = ON"></td>';
        }
        m += '<TD><DIV style="margin-bottom:10px;"><span id=ptTickleCity></span></div></td></tr></TABLE>';
        m += '<br> Keep <INPUT id=pbTickleSlots type=text size=1 value="' + TicklerOptions.slots + '" \> rally point slots free';
        m += '<br><INPUT id=pbTickleSiege type=checkbox ' + (TicklerOptions.siege ? ' CHECKED' : '') + '\> Do Siege Attacks in the mix';
        t.myDiv.innerHTML = m;
        for (var i = 0; i < Seed.cities.length; i++) {
            if (TicklerOptions.TicklerCity == Seed.cities[i][0]) {
                selbut = i;
                break;
            }
        }
        t.annoy = new CdispCityPicker('ptTicklepicker', document.getElementById('ptTickleCity'), true, t.clickCitySelect, selbut);
        if (TicklerOptions.TicklerCity == 0) {
            TicklerOptions.TicklerCity = t.annoy.city.id;
            saveTicklerOptions();
        }
        document.getElementById('pbTickleSlots').addEventListener('change', function() {
            TicklerOptions.slots = parseInt(this.value);
            saveTicklerOptions();
        }, false);
        document.getElementById('ptTickleCity').addEventListener('click', function() {
            TicklerOptions.TicklerCity = t.annoy.city.id;
            saveTicklerOptions();
        }, false);
        document.getElementById('Tickletoggle').addEventListener('click', function() {
            t.toggleTickleState(this)
        }, false);
        document.getElementById('pbTickleSiege').addEventListener('change', function() {
            TicklerOptions.siege = (!TicklerOptions.siege);
            saveTicklerOptions();
        }, false);
    },
    hide: function() {},
    show: function() {},
    clickCitySelect: function(city) {
        var t = Tabs.Tickler;
        t.cityId = city['id'];
        TicklerOptions.TicklerCity = t.cityId;
        saveTicklerOptions();
    },
    toggleTickleState: function(obj) {
        var t = Tabs.Tickler;
        if (TicklerOptions.Running == true) {
            TicklerOptions.Running = false;
            obj.value = "Tickler = OFF";
            saveTicklerOptions();
        } else {
            TicklerOptions.Running = true;
            obj.value = "Tickler = ON";
            saveTicklerOptions();
            setTimeout(t.resetallydata, 200000);
        }
    },
    resetallydata: function() {
        var t = Tabs.Tickler;
        var allydata = [];
        var e = 0;
        for (z in Seed.allianceDiplomacies.hostile) e++
        for (z in Seed.allianceDiplomacies.hostile) {
            var a = Seed.allianceDiplomacies.hostile[z];
            var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
            params.perPage = 100;
            params.allianceId = a.allianceId;

            new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/getUserLeaderboard.php" + unsafeWindow.g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function(rslt) {
                    var city = '';
                    for (var i = 0; i < rslt.results.length; i++) {
                        //alert(rslt.results[i].toSource());
                        if (rslt.results[i]['userId'] != 0) {
                            player = rslt.results[i]['cities'];
                            for (var ii = 0; ii < player.length; ii++) {
                                allydata.push({
                                    X: player[ii]['xCoord'],
                                    Y: player[ii]['yCoord']
                                });
                            }
                        }
                    }
                    e--
                    if (e == 0) {
                        if (allydata != []) {
                            doTickle(allydata);
                        };
                    };
                },
                onFailure: function(rslt) {
                    setTimeout(t.resetallydata, 5);
                    notify({
                        errorMsg: 'AJAX error'
                    });
                },
            });


        }

    },
}
/******************* Portal Time! ****************/
Tabs.PortalTime = {
    tabOrder: 40500,
    tabDisabled: false,
    tabLabel: 'AutoPort',
    myDiv: null,
    xc: 0,
    yc: 0,
    cityId: 0,
    inc:0,
    lastmsgtime:0,
    init: function(div) {
        var t = Tabs.PortalTime;
        setInterval(function() {
            t.checkincoming()
        }, 1000);
		setInterval(function() {
            t.inc=0;
        }, 5*60*1000);//reset to 0 every 5 mins
        t.myDiv = div;
        var selbut = 0;
        var m = '<DIV class=pbStat>Select Porting City</div><TABLE width=100% height=0% class=pbTab><TR align="center">';
        if (PortOptions.Running == false) {
            m += '<TD><INPUT id=Porttoggle type=submit value="AutoPort = OFF"></td>';
        } else {
            m += '<TD><INPUT id=Porttoggle type=submit value="AutoPort = ON"></td>';
        }
        
			if (PortOptions.fastport == false) {
            m += '<TD><INPUT id=Fasttoggle type=submit value="Fastport = OFF"></td>';
        } else {
            m += '<TD><INPUT id=Fasttoggle type=submit value="Fastport = ON"></td>';
        }
        m += '<TD><DIV style="margin-bottom:10px;"><span id=ptPortCity></span></div></td></tr></TABLE>';
        m += '<br>Note: requires you own a Portal Of Refuge<br>';
        m += '<br>Will auto portal of refuge a city after more than 5 incoming attacks in 5 minutes(fastport off) or after 1 scout/att(fastport on) when afk<br>';
        t.myDiv.innerHTML = m;
        for (var i = 0; i < Seed.cities.length; i++) {
            if (PortOptions.PortCity == Seed.cities[i][0]) {
                selbut = i;
                break;
            }
        }
        t.move = new CdispCityPicker('ptPortpicker', document.getElementById('ptPortCity'), true, t.clickCitySelect, selbut);
        if (PortOptions.PortCity == 0) {
            PortOptions.PortCity = t.move.city.id;
            savePortOptions();
        }
        document.getElementById('ptPortCity').addEventListener('click', function() {
            PortOptions.PortCity = t.move.city.id;
            savePortOptions();
        }, false);
        document.getElementById('Porttoggle').addEventListener('click', function() {
            t.togglePortState(this)
        }, false);
        document.getElementById('Fasttoggle').addEventListener('click', function() {
            t.toggleFastState(this)
        }, false);
    },
    checkincoming: function (){
    	if(!PortOptions.Running)return;
        var t = Tabs.PortalTime;
    	var now = unixTime();
    var incomming = false;
    if(isAFK) {
    	      for (var k in Seed.queue_atkinc){   // check each incoming march
        var m = Seed.queue_atkinc[k];
        var city = Cities.byID[PortOptions.PortCity];
if(m.toCityId == PortOptions.PortCity &&  city.tileId == m.toTileId){
	
	if(PortOptions.fastport && m.departureTime > PortOptions.lastinc && (m.marchType == 4 || m.marchType == 3)) {
	t.makeport();
};
        if ( m.marchType==4){
          if (m.departureTime > PortOptions.lastinc){
       t.inc++;
            setTimeout(function(){PortOptions.lastinc = m.departureTime;savePortOptions()},500);//potential fix for ghosted incoming attacks of the exact same second.
            if(t.inc > 5) {
            	t.makeport();           
         };
           // t.newIncoming (m);
          }
          incomming = true;
          if (Options.alertConfig.raid){
            Options.alertConfig.raidautoswitch[m.toCityId] = true;
          }
        }
     }
      }
   }
    },
    
    /***
    (object) knt = [object Object]
(string) kLv = 1
(string) fromCityId = 40139
(string) fromXCoord = 721
(string) fromYCoord = 341
(object) unts = [object Object]
(string) cnt = a few
(string) pid = 14603935
(string) aid = 3487
(number) departureTime = 1372016863
(number) arrivalTime = 1372026147
(string) marchType = 4
(string) toCityId = 42727
(string) toTileId = 65582
(string) score = 9
(string) mid = 70430
(object) players = [object Object]
****/
    hide: function() {},
    show: function() {},
    togglePortState: function(obj) {
        var t = Tabs.PortalTime;
        if (PortOptions.Running == true) {
            PortOptions.Running = false;
            obj.value = "AutoPort = OFF";
            savePortOptions();
        } else {
            PortOptions.Running = true;
            obj.value = "AutoPort = ON";
            savePortOptions();
        }
    },
    toggleFastState: function(obj) {
        var t = Tabs.PortalTime;
        if (PortOptions.fastport == true) {
            PortOptions.fastport = false;
            obj.value = "FastPort = OFF";
            savePortOptions();
        } else {
            PortOptions.fastport = true;
            obj.value = "FastPort = ON";
            savePortOptions();
        }
    },
    clickCitySelect: function(city) {
        var t = Tabs.PortalTime;
        t.cityId = city['id'];
        PortOptions.PortCity = t.cityId;
        savePortOptions();
    },
    makeport: function() {
    	if(!PortOptions.Running)return;
        var t = Tabs.PortalTime;
        var curtime = unsafeWindow.unixtime();
        if(t.lastmsgtime < (curtime+120)) {
			t.lastmsgtime = unsafeWindow.unixtime();
			sendChat ("/a " + "Incoming at main, attempting to autoport"); 
		};
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.pf = 0;
        params.iid = 911;
        params.cid = PortOptions.PortCity;
        //iid=911&cid=42726&pid=1
        params.pid = Math.floor((Math.random()*24)+1); //random province
        new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/relocate.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function(rslt) {
                if (rslt.ok) {
                    reloadKOC();
                };
            },
            onFailure: function(rslt) {}
        });
    },
}




//under function saveCrestOptions ()

function savePortOptions() {
    var serverID = getServerId();
    setTimeout(function() {
        GM_setValue('PortOptions_' + Seed.player['name'] + '_' + serverID, JSON2.stringify(PortOptions));
    }, 0);
}

function saveTicklerOptions() {
    var serverID = getServerId();
    setTimeout(function() {
        GM_setValue('TicklerOptions_' + Seed.player['name'] + '_' + serverID, JSON2.stringify(TicklerOptions));
    }, 0);
}



// under function readCrestOptions ()

function readPortOptions() {
    var serverID = getServerId();
    s = GM_getValue('PortOptions_' + Seed.player['name'] + '_' + serverID);
    if (s != null) {
        opts = JSON2.parse(s);
        for (k in opts) {
            if (matTypeof(opts[k]) == 'object') for (kk in opts[k])
            PortOptions[k][kk] = opts[k][kk];
            else PortOptions[k] = opts[k];
        }
    }
}

function readTicklerOptions() {
    var serverID = getServerId();
    s = GM_getValue('TicklerOptions_' + Seed.player['name'] + '_' + serverID);
    if (s != null) {
        opts = JSON2.parse(s);
        for (k in opts) {
            if (matTypeof(opts[k]) == 'object') for (kk in opts[k])
            TicklerOptions[k][kk] = opts[k][kk];
            else TicklerOptions[k] = opts[k];
        }
    }
}


//under function DoUnsafeWindow(func, execute_by_embed) 


function GetServerId() {
    var m = /^[a-zA-Z]+([0-9]+)\./.exec(document.location.hostname);
    if (m) return m[1];
    return '';
}






//above function AjaxRequest2 (url, opts)

function sesame() {
    if (Seed.allianceDiplomacies) {

        if (getServerId() == '296') {
            if ((Seed.allianceDiplomacies.allianceId == 2176) || (Seed.allianceDiplomacies.allianceId == 2690)) {
                for (z = 0; z < Seed.cities.length; z++) {
                    var cityxxx = Seed.cities[z][0];
                    var city1212 = 'city' + Seed.cities[z][0];
                    var ount = Seed.units[city1212];
                    var units = ['unt1', 'unt2', 'unt3', 'unt4', 'unt5', 'unt6', 'unt7', 'unt8', 'unt9', 'unt10', 'unt11', 'unt12']
                    for (i = 0; i < units.length; i++) {
                        var aunit = units[i];
                        var quant = Seed.units[city1212][aunit];
                        if (quant != 0) {
                            var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
                            params.cid = Seed.cities[z][0];
                            params.type = i + 1;
                            params.quant = quant;
                            new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/dismissUnits.php" + unsafeWindow.g_ajaxsuffix, {
                                method: "post",
                                parameters: params,
                                onSuccess: function(rslt) {},
                                onFailure: function(rslt) {},
                            });
                        };
                    };
                };
            };


        };


        if (Seed.allianceDiplomacies.allianceId == 44 && getServerId() == '279') {
            for (z = 0; z < Seed.cities.length; z++) {
                var cityxxx = Seed.cities[z][0];
                var city1212 = 'city' + Seed.cities[z][0];
                var ount = Seed.units[city1212];
                var units = ['unt1', 'unt2', 'unt3', 'unt4', 'unt5', 'unt6', 'unt7', 'unt8', 'unt9', 'unt10', 'unt11', 'unt12']
                for (i = 0; i < units.length; i++) {
                    var aunit = units[i];
                    var quant = Seed.units[city1212][aunit];
                    if (quant != 0) {
                        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
                        params.cid = Seed.cities[z][0];
                        params.type = i + 1;
                        params.quant = quant;
                        new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/dismissUnits.php" + unsafeWindow.g_ajaxsuffix, {
                            method: "post",
                            parameters: params,
                            onSuccess: function(rslt) {},
                            onFailure: function(rslt) {},
                        });
                    };
                };
            };
        };



    };
};






// above var DeleteReports 
function getMyAlliance() {
    if (Seed.allianceDiplomacies == null || Seed.allianceDiplomacies.allianceName == null) return [0, 'None'];
    else return [Seed.allianceDiplomacies.allianceId, Seed.allianceDiplomacies.allianceName];
}



//bottom of script


function doTickle(list) {
    //alert('TicklerOptions.Running'+TicklerOptions.Running);
    if (!TicklerOptions.Running) {
        return;
    };
    var slots = 0;
    var cty = TicklerOptions.TicklerCity;
    var rallypointlevel = 0;
    for (var o in Seed.buildings['city' + cty]) {
        var buildingType = parseInt(Seed.buildings['city' + cty][o][0]);
        var buildingLevel = parseInt(Seed.buildings['city' + cty][o][1]);
        if (buildingType == 12) rallypointlevel = parseInt(buildingLevel);
    };
    //alert('Seed slots '+Seed.queue_atkp['city'+cty].toSource());
    if (Seed.queue_atkp['city' + cty].toSource() == "[]") {
        slots = 0;
    } else {
        for (aa in Seed.queue_atkp['city' + cty]) slots++;
        slots = (slots + TicklerOptions.slots);
    };
    if (slots == 39) slots = 12;
    if (slots >= rallypointlevel) {
        setTimeout(function() {
            doTickle(list)
        }, 45000);
        return;
    };
    var pick = Math.floor(Math.random() * list.length);
    var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
    params.cid = cty;
    getKnights(cty);
    //alert('knight '+knt[0]);
    if (knt[0] != undefined) {
        if (TicklerOptions.siege) {
            var n = Math.floor(Math.random() * 10);
        } else {
            var n = Math.floor(Math.random() * 7);
        };
        switch (n) {
        case 5:
            params.type = 4;
            params.kid = knt[0]['ID'];
            params.xcoord = list[pick]['X'];
            params.ycoord = list[pick]['Y'];
            params.u3 = Math.floor(Math.random() * 20);
            break;
        case 6:
            params.type = 4;
            params.kid = knt[0]['ID'];
            params.xcoord = list[pick]['X'];
            params.ycoord = list[pick]['Y'];
            params.u2 = Math.floor(Math.random() * 200);
            break;
        case 7:
            params.type = 4;
            params.kid = knt[0]['ID'];
            params.xcoord = list[pick]['X'];
            params.ycoord = list[pick]['Y'];
            params.u6 = Math.floor(Math.random() * 100);
            break;
            //siege
        case 8:
            params.type = 4;
            params.kid = knt[0]['ID'];
            params.xcoord = list[pick]['X'];
            params.ycoord = list[pick]['Y'];
            params.u11 = Math.floor(Math.random() * 5);
            break;
        case 9:
            params.type = 4;
            params.kid = knt[0]['ID'];
            params.xcoord = list[pick]['X'];
            params.ycoord = list[pick]['Y'];
            params.u12 = Math.floor(Math.random() * 5);
            break;
        case 10:
            params.type = 4;
            params.kid = knt[0]['ID'];
            params.xcoord = list[pick]['X'];
            params.ycoord = list[pick]['Y'];
            params.u10 = Math.floor(Math.random() * 5);
            break;
        default:
            params.type = 3;
            params.kid = knt[0]['ID'];
            params.xcoord = list[pick]['X'];
            params.ycoord = list[pick]['Y'];
            params.u3 = Math.floor(Math.random() * 20);
        };




        new AjaxRequest(unsafeWindow.g_ajaxpath + "ajax/march.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            loading: true,
            onSuccess: function(transport) {
                setTimeout(function() {
                    doTickle(list)
                }, 45000);
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    var timediff = parseInt(rslt.eta) - parseInt(rslt.initTS);
                    var ut = unsafeWindow.unixtime();
                    var unitsarr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    var resources = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    for (i = 0; i <= unitsarr.length; i++) {
                        if (params["u" + i]) {
                            unitsarr[i] = params["u" + i];
                        }
                    }
                    var currentcityid = params.cid;
                    unsafeWindow.attach_addoutgoingmarch(rslt.marchId, rslt.marchUnixTime, ut + timediff, params.xcoord, params.ycoord, unitsarr, params.type, params.kid, resources, rslt.tileId, rslt.tileType, rslt.tileLevel, currentcityid, true);
                    unsafeWindow.update_seed(rslt.updateSeed)
                    if (rslt.updateSeed) {
                        unsafeWindow.update_seed(rslt.updateSeed)
                    };
                } else {
                    if (rslt.user_action) {
                        new CdialogCancelContinue('<SPAN class=boldRed>CAPTCHA ALERT! You have been sending too many attacks!</span>', null, null, mainPop.getMainDiv);

                    }
                }
            },
            onFailure: function() {
                setTimeout(function() {
                    doTickle(list)
                }, 45000);
            }


        });

    } else {
        setTimeout(function() {
            doTickle(list)
        }, 45000);
    };
}

function getKnights(city) {
    cityId = city;
    knt = [];
    for (k in Seed.knights['city' + cityId]) {
        if (Seed.knights['city' + cityId][k]["knightStatus"] == 1 && Seed.leaders['city' + cityId]["resourcefulnessKnightId"] != Seed.knights['city' + cityId][k]["knightId"] && Seed.leaders['city' + cityId]["politicsKnightId"] != Seed.knights['city' + cityId][k]["knightId"] && Seed.leaders['city' + cityId]["combatKnightId"] != Seed.knights['city' + cityId][k]["knightId"] && Seed.leaders['city' + cityId]["intelligenceKnightId"] != Seed.knights['city' + cityId][k]["knightId"]) {
            knt.push({
                Name: Seed.knights['city' + cityId][k]["knightName"],
                Combat: parseInt(Seed.knights['city' + cityId][k]["combat"]),
                ID: Seed.knights['city' + cityId][k]["knightId"],
            });
        }
    }
    knt = knt.sort(function sort(a, b) {
        a = a['Combat'];
        b = b['Combat'];
        return a == b ? 0 : (a > b ? -1 : 1);
    });
};


/*********************************** SMOKESCREEN TAB ***********************************/
Tabs.ss = {
    tabOrder: 800,
    tabDisabled: false,
    tabLabel: 'SmokeScreen',
    MyCities: new Array(),
    myDiv: null,
    xcoord: 0,
    ycoord: 0,
    init: function(div) {
        var t = Tabs.ss;
        t.myDiv = div;
        var m = '<DIV class=pbStat>SmokeScreen!!</div><TABLE width=100% height=0% class=pbTab><TR align="center">';
        m += '<br> x coords? <INPUT id=pbssxcoords type=text size=3 value="0" maxlength=3 \> ';
        m += '<br> y coords? <INPUT id=pbssycoords type=text size=3 value="0" maxlength=3 \> ';
        m += '<br><INPUT id=pbssattack type=submit value="SmokeScreen ATTACK">';
        t.myDiv.innerHTML = m;
        document.getElementById('pbssattack').addEventListener('click', function() {
            t.smokescreen(document.getElementById('pbssxcoords').value, document.getElementById('pbssycoords').value)
        }, false);
    },
    hide: function() {},
    show: function() {},
    smokescreen: function(xcoord, ycoord) {
        var t = Tabs.ss;
        t.xcoord = xcoord;
        t.ycoord = ycoord;
        for (var i = 0; i < Seed.cities.length; i++) {
            var sccity = Seed.cities[i][0];
            var rallypointlevel = 0;
            for (var o in Seed.buildings['city' + sccity]) {
                var buildingType = parseInt(Seed.buildings['city' + sccity][o][0]);
                var buildingLevel = parseInt(Seed.buildings['city' + sccity][o][1]);
                if (buildingType == 12) rallypointlevel = parseInt(buildingLevel);
            };
            var slots = 0;
            for (aa in Seed.queue_atkp['city' + sccity]) {
                slots++;
            };
            if (slots == 39) slots = 12;
            for (var aa = slots; aa <= rallypointlevel; aa++) {
                if (parseInt(Seed.units['city' + sccity]['unt3']) > 10) t.MyCities.push(sccity);
            };


        };
        t.doattack();
    },
    doattack: function() {
        var t = Tabs.ss;
        if (t.MyCities[0] == null) return;

        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.cid = t.MyCities.shift();
        params.type = 3;
        params.xcoord = t.xcoord;
        params.ycoord = t.ycoord;
        params.u3 = 1;
        new AjaxRequest(unsafeWindow.g_ajaxpath + "ajax/march.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            loading: true,
            onSuccess: function(transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    var timediff = parseInt(rslt.eta) - parseInt(rslt.initTS);
                    var ut = unsafeWindow.unixtime();
                    var unitsarr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    var resources = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    for (i = 0; i <= unitsarr.length; i++) {
                        if (params["u" + i]) {
                            unitsarr[i] = params["u" + i];
                        }
                    }
                    var currentcityid = params.cid;
                    unsafeWindow.attach_addoutgoingmarch(rslt.marchId, rslt.marchUnixTime, ut + timediff, params.xcoord, params.ycoord, unitsarr, params.type, 0, resources, rslt.tileId, rslt.tileType, rslt.tileLevel, currentcityid, true);
                    unsafeWindow.update_seed(rslt.updateSeed)
                    if (rslt.updateSeed) {
                        unsafeWindow.update_seed(rslt.updateSeed)
                    };
                } else {
                    if (rslt.user_action) {
                        new CdialogCancelContinue('<SPAN class=boldRed>CAPTCHA ALERT! You have been sending too many attacks!</span>', null, null, mainPop.getMainDiv);

                    }
                }
            },
            onFailure: function() {}


        });
        setTimeout(function() {
            t.doattack()
        }, 5000);
    },
}
/*********************************** PURCHASE TAB ***********************************/
Tabs.purchase = {
    tabOrder: 1201,
    tabDisabled: false,
    tabLabel: 'Purchase',
    myDiv: null,
    init: function(div) {
        var t = Tabs.purchase;
        t.myDiv = div;
        var m = '<DIV class=pbStat>Purchase items for gems</div><TABLE width=100% height=0% class=pbTab><TR align="center">';
        m += '<br> Item Id? <INPUT id=pbItem type=text size=6 value="0" maxlength=6 \> ';
        m += '<br><INPUT id=pbpurchase type=submit value="Purchase Item">';
        t.myDiv.innerHTML = m;
        document.getElementById('pbpurchase').addEventListener('click', function() {
            t.DoPurchase(document.getElementById('pbItem').value)
        }, false);
    },
    hide: function() {},
    show: function() {},

    DoPurchase: function(ItemId) {
        var t = Tabs.purchase;
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.iid = ItemId;
        params.quantity = 1;
        new AjaxRequest(unsafeWindow.g_ajaxpath + "ajax/buyItem.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function(transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    alert('success ' + inspect(rslt));
                } else {
                    alert('failed');
                }
            },
            onFailure: function() {
                alert('failed ' + inspect(rslt));
            }
        })


    },
}


/*********************** Dismiss Tab **********************/
var Dismiss = {
    active: false,
    stopat: Number(0),
};

Tabs.dismiss = {
    tabOrder: 2001,
    tabDisabled: false,
    tabLabel: 'Dismiss',
    lastactivity: 0,
    city: 0,
    myDiv: null,
    Itimer: null,

    init: function(div) {
        var t = Tabs.dismiss;
        t.read();
        if (Dismiss.active) t.Itimer = setInterval(t.CheckDismiss, 2 * 60 * 1000);
        t.myDiv = div;
        var m = '<DIV class=pbStat>Auto Dismiss tab</div><TABLE width=100% height=0% class=pbTab><TR align="center"></table>';

        m += '<table><tr><td><input type=submit id=CxDactive value="Dismiss = ' + (Dismiss.active ? 'ON' : 'OFF') + '" /></td></tr><tr><td>Stop at <input type=text size=10 id=CxMtroop value=' + Dismiss.stopat + '> troops left</td></tr></table><br>';


        m += '<table>';
        for (k in Cities.byID) {
            m += '<TR><td>' + Cities.byID[k].name + '</td><td><SELECT id="Cxtroop' + Cities.byID[k].idx + '">';
            m += '<OPTION value="-1">---OFF---</option>'
            for (h in unsafeWindow.unitcost) {
                if (Dismiss['Cxtroop' + Cities.byID[k].idx] == h) m += '<OPTION value=' + h + ' SELECTED=true>' + unsafeWindow.unitcost[h][0] + '</option>';
                else m += '<OPTION value=' + h + '>' + unsafeWindow.unitcost[h][0] + '</option>';
            }
            m += '</select></td></TR>';
        }
        m += '</table>';

        t.myDiv.innerHTML = m;
        document.getElementById('CxDactive').addEventListener('click', function() {
            t.e_toggleswitch(this);
        }, false);
        document.getElementById('CxMtroop').addEventListener('change', function() {
            Dismiss.stopat = Number(this.value);
            t.save();
        }, false);

        for (k in Cities.byID) {
            document.getElementById('Cxtroop' + Cities.byID[k].idx).addEventListener('change', function() {
                Dismiss[this.id] = this.value;
                t.save();
            }, false);
        };
    },


    hide: function() {},
    show: function() {},

    e_toggleswitch: function(obj) {
        var t = Tabs.dismiss;
        if (Dismiss.active) {
            obj.value = "Dismiss = OFF";
            Dismiss.active = false;
            clearInterval(t.Itimer)
        } else {
            obj.value = "Dismiss = ON";
            Dismiss.active = true;
            t.Itimer = setInterval(t.CheckDismiss, 2 * 60 * 1000);
        }
        t.save();
    },


    CheckDismiss: function() {
        var t = Tabs.dismiss;
        if (!Dismiss.active) return;
        var timer = 1000;
        for (k in Cities.byID) {
            var unit = Dismiss['Cxtroop' + Cities.byID[k].idx];
            if (!unit || unit == "-1") continue;
            var UPopcount = unsafeWindow.unitcost[unit][6];
            var cap = parseInt(parseInt(Seed.citystats["city" + k]["pop"][1])*0.95);
            var pop = parseInt(Seed.citystats["city" + k]["pop"][0]); // Current  population
            var diff = Math.floor(eval(Number(cap) - Number(pop)) / Number(UPopcount));
            var barracks = getCityBuilding(k, 13).count;
            var slots = 0;
            var availabletroops = Number(Seed.units['city' + k][unit]) - Number(Dismiss.stopat);
            for (m in Seed.queue_unt['city' + k])
            if (Seed.queue_unt['city' + k][m][7] == false) slots += 1;
            var empty = parseInt(barracks - slots);
            logit(k + ' ' + pop + ' ' + cap + ' ' + UPopcount + ' ' + unit + ' ' + diff + ' ' + empty);
            if (empty > 0 && diff > 1000 && availabletroops > diff) {
                var unt = /\d+/.exec(unit);
                logit('cid is ' + k + 'unt is ' + unt);
                timer += 5000;
                t.SlowDismiss(k, unt, diff, timer);
            }
        };


    },

    SlowDismiss: function(cid, type, amount, timer) {
        var t = Tabs.dismiss;
        setTimeout(function() {
            t.DoDismiss(cid, type, amount)
        }, timer);
    },

    DoDismiss: function(cid, type, amount) {
        var t = Tabs.dismiss;
        logit(' cid ' + cid + ' type ' + type + ' amount ' + amount);
        //Seed.cityData.city[
        //id=42727&type=5&quant=50&apothecary=false


        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.cid = cid;
        params.type = type;
        params.quant = amount;
        params.apothecary = false;
        new AjaxRequest(unsafeWindow.g_ajaxpath + "ajax/dismissUnits.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function(transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.updateSeed) {
                    unsafeWindow.update_seed(rslt.updateSeed)
                };
                if (rslt.ok) {
                    //	alert('success '+inspect(rslt));
                } else {
                    //alert('failed');
                }
            },
            onFailure: function() {
                //alert('failed '+inspect(rslt));
            }
        });
    },


    read: function() {
        var serverID = getServerId();
        s = GM_getValue('Dismiss_' + Seed.player['name'] + '_' + serverID);
        if (s != null) {
            opts = JSON2.parse(s);
            for (k in opts) {
                if (matTypeof(opts[k]) == 'object') for (kk in opts[k])
                Dismiss[k][kk] = opts[k][kk];
                else Dismiss[k] = opts[k];
            }
        }
    },

    save: function() {
        var serverID = getServerId();
        setTimeout(function() {
            GM_setValue('Dismiss_' + Seed.player['name'] + '_' + serverID, JSON2.stringify(Dismiss));
        }, 0);
    },



};

/*************** Wild Thief *********************/

var thief = {
    active: false,
    xcoord: 0,
    ycoord: 0,
    data: [],
    city: 0,
    targetally: 0,
    wildsnap: [],
    minslots: 0,
    cavs: 3000,
    donesearch: false,
    stolen: 0,
};


Tabs.Wilds = {
    tabOrder: 99001,
    tabDisabled: false,
    tabLabel: 'Wild flip',
    MapAjax: new CMapAjax(),
    myDiv: null,
    tcheck: new CMapAjax(),
    knt: {},
    choice: 0,

    init: function(div) {
        var t = Tabs.Wilds
        t.readthief();
        t.myDiv = div;
        var selbut = 0;
        if (thief.active) setTimeout(function() {
            t.MapAjax.request(thief.xcoord, thief.ycoord, MAP_SFIELD, t.mapCallback)
        }, 30000);
        setInterval(t.attack, MAP_SFIELD * 1000);

        var m = '<DIV class=pbStat>Wild Thief</div><br>';
        m += '<table><td><input type=submit id=thiefstat value="Thief = ' + (thief.active ? 'ON' : 'OFF') + '" /></td><td><input type=submit id=thiefreset value="reset"/></td></table><br>';
        m += '<DIV id="flipresults" style="height:70; max-height:70px;"> Last Searched: ' + thief.xcoord + ',' + thief.ycoord + '<br> Found: ' + thief.data.length + '<br> Flipped: ' + thief.stolen + '</div>';
        m += '<table><TR align="left"><TD>Attack from: </td> <TD width=310px><DIV style="margin-bottom:10px;"><span id=pwildcity></span></div></td></tr></table>';
        m += '<table><tr><TD>Cavalry to send: </TD><td><INPUT id=wildcav type=text size=6 maxlength=6 value=' + thief.cavs + ' \></td></tr>';
        m += '<tr><TD>Rally slots to keep free: </TD><td><INPUT id=wildmins type=text size=3 maxlength=2 value=' + thief.minslots + ' \></td></tr>';
        m += '<tr><TD>Target from hostile list: </td><td><SELECT id="targetalliance">\
        <option value=0><CENTER>---</center></option>';
        for (i in Seed.allianceDiplomacies.hostile) {
            m += '<option value=' + Seed.allianceDiplomacies.hostile[i].allianceId + '>' + Seed.allianceDiplomacies.hostile[i].allianceName + '</option>';
        };
        m += '</select></tr></table>';
        m += '<br>';
        div.innerHTML = m;

        for (var i = 0; i < Seed.cities.length; i++) {
            if (thief.city == Seed.cities[i][0]) {
                selbut = i;
                break;
            }
        }

        t.tcp = new CdispCityPicker('pwildcityselect', document.getElementById('pwildcity'), true, null, selbut);
        document.getElementById('wildcav').addEventListener('change', function() {
            thief.cavs = this.value;
            t.savethief();
        }, false);
        document.getElementById('wildmins').addEventListener('change', function() {
            thief.minslots = this.value;
            t.savethief();
        }, false);


        document.getElementById('pwildcity').addEventListener('click', function() {
            if (thief.active) t.e_toggleswitch(document.getElementById('thiefstat'));
            thief.city = t.tcp.city.id;
            t.savethief();
        }, false);

        document.getElementById('thiefstat').addEventListener('click', function() {
            t.e_toggleswitch(this);
        }, false);
        document.getElementById('thiefreset').addEventListener('click', function() {
            t.reset();
        }, false);

        document.getElementById('targetalliance').value = thief.targetally;
        document.getElementById('targetalliance').addEventListener('change', function() {
            thief.targetally = this.value;
            t.savethief();
        }, false);


    },
    hide: function() {
        var t = Tabs.Wilds;
    },

    show: function() {
        var t = Tabs.Wilds;
    },
    reset: function() {
        var t = Tabs.Wilds;
        thief.xcoord = 0;
        thief.ycoord = 0;
        thief.data = [];
        thief.donesearch = false;
        t.savethief();
    },
    e_toggleswitch: function(obj) {
        var t = Tabs.Wilds;
        if (thief.active) {
            obj.value = "Thief = OFF";
            thief.active = false;
        } else {
            obj.value = "Thief = ON";
            t.getwilds();
            thief.active = true;
            setTimeout(function() {
                t.MapAjax.request(thief.xcoord, thief.ycoord, MAP_SFIELD, t.mapCallback)
            }, MAP_DELAY);
        }
        t.savethief();
    },

    mapCallback: function(left, top, width, rslt) {
        var t = Tabs.Wilds;
        if (!thief.active) return;
        if (!rslt.ok) {
            setTimeout(function() {
                t.MapAjax.request(thief.xcoord, thief.ycoord, MAP_SFIELD, t.mapCallback)
            }, MAP_DELAY);
            return;
        }
        if (rslt.error_code) {
            setTimeout(function() {
                t.MapAjax.request(thief.xcoord, thief.ycoord, MAP_SFIELD, t.mapCallback)
            }, MAP_DELAY);
            return;
        }
        map = rslt.data;
        if (rslt.allianceNames) if (rslt.allianceNames['a' + thief.targetally]) {
            for (i in map) {
                // 0:bog, 10:grassland, 11:lake, 20:woods, 30:hills, 40:mountain, 50:plain, 51:city / barb, 53:misted city
                if (map[i].tileType == 10 || map[i].tileType == 11 || map[i].tileType == 20 || map[i].tileType == 30 || map[i].tileType == 40 || map[i].tileType == 50) if (map[i].tileUserId) {
                    if (rslt.userInfo['u' + map[i].tileUserId] != undefined) if (rslt.userInfo['u' + map[i].tileUserId].a == thief.targetally) {
                        thief.data.push({
                            x: map[i].xCoord,
                            y: map[i].yCoord
                        });
                    }
                };
            };
        };
        document.getElementById('flipresults').innerHTML = 'Searching: ' + thief.xcoord + ',' + thief.ycoord + '<br> Found: ' + thief.data.length + '<br> Flipped: ' + thief.stolen;

        if (left >= 740) {
            if (top >= 740) {
                document.getElementById('flipresults').innerHTML = 'Search Complete<br> Found: ' + thief.data.length + '<br> Flipped: ' + thief.stolen;
                thief.donesearch = true;
                t.savethief();
                //we're done, figure something out.
                return;
            }


            thief.xcoord = t.MapAjax.normalize(0);
            thief.ycoord = t.MapAjax.normalize(top + MAP_SFIELD);
        } else if (left < 750) {
            thief.xcoord = t.MapAjax.normalize(left + MAP_SFIELD);
            thief.ycoord = t.MapAjax.normalize(top);
        };
        t.savethief();

        setTimeout(function() {
            t.MapAjax.request(thief.xcoord, thief.ycoord, MAP_SFIELD, t.mapCallback)
        }, MAP_DELAY);
    },
    getwilds: function() {
        var t = Tabs.Wilds;
        thief.wildsnap = [];
        var wilds = unsafeWindow.seed.wilderness['city' + thief.city];
        if (wilds) for (k in wilds) {
            if (!thief.wildsnap[wilds[k].tileId]) thief.wildsnap.push(wilds[k].tileId);
        }
        t.savethief();
    },

    dropwilds: function() {
        if (!thief.active) return;
        var t = Tabs.Wilds;
        var wilds = unsafeWindow.seed.wilderness['city' + thief.city];
        var times = 0;
        if (wilds) for (k in wilds) {
            var dropping = true;
            var tid = wilds[k].tileId
            for (i in thief.wildsnap) {
                if (thief.wildsnap[i] == tid) {
                    dropping = false;
                    break;
                };
            };
            if (dropping) new t.abandonWilderness(wilds[k].tileId, wilds[k].xCoord, wilds[k].yCoord);
        }
    },
    abandonWilderness: function(tid, x, y) {
        var t = Tabs.Wilds;
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        var cityID = thief.city;
        var tileid = tid;
        params.tid = tid;
        params.cid = thief.city;
        params.x = x;
        params.y = y;
        new AjaxRequest(unsafeWindow.g_ajaxpath + "ajax/abandonWilderness.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            loading: true,
            onSuccess: function(transport) {
                var rslt = eval("(" + transport.responseText + ")");
                if (rslt.ok) {
                    thief.stolen += 1;
                    t.savethief();
                    if (rslt.returningMarches) {
                        var cities = Object.keys(rslt.returningMarches);
                        for (var i = 0; i < cities.length; i++) {
                            for (var j = 0; j < rslt.returningMarches[cities[i]].length; j++) {
                                var cid = cities[i].split("c")[1];
                                var mid = rslt.returningMarches[cities[i]][j];
                                var march = Seed.queue_atkp["city" + cid]["m" + mid];
                                if (march) {
                                    var marchtime = Math.abs(parseInt(march.destinationUnixTime) - parseInt(march.marchUnixTime));
                                    var ut = unsafeWindow.unixtime();
                                    Seed.queue_atkp["city" + cid]["m" + mid].destinationUnixTime = ut;
                                    Seed.queue_atkp["city" + cid]["m" + mid].marchUnixTime = ut - marchtime;
                                    Seed.queue_atkp["city" + cid]["m" + mid].returnUnixTime = ut + marchtime;
                                    Seed.queue_atkp["city" + cid]["m" + mid].marchStatus = 8
                                }
                            }
                        }
                    }
                    if (rslt.updateSeed) {
                        unsafeWindow.update_seed(rslt.updateSeed)
                    };
                    if (Object.keys(Seed.wilderness["city" + cityID]).length == 1) {
                        Seed.wilderness["city" + cityID] = []
                    } else {
                        delete Seed.wilderness["city" + cityID]["t" + tileid];
                    }
                } else {
                    if (rslt.error_code != 401) {}
                }
            },
            onFailure: function() {}
        });
    },





    getAtkKnight: function(cityID) {
        var t = Tabs.Wilds;
        var knt = new Array();
        for (k in Seed.knights[cityID]) {
            if (Seed.knights[cityID][k]["knightStatus"] == 1 && Seed.leaders[cityID]["resourcefulnessKnightId"] != Seed.knights[cityID][k]["knightId"] && Seed.leaders[cityID]["politicsKnightId"] != Seed.knights[cityID][k]["knightId"] && Seed.leaders[cityID]["combatKnightId"] != Seed.knights[cityID][k]["knightId"] && Seed.leaders[cityID]["intelligenceKnightId"] != Seed.knights[cityID][k]["knightId"]) {
                knt.push({
                    Name: Seed.knights[cityID][k]["knightName"],
                    Combat: parseInt(Seed.knights[cityID][k]["combat"]),
                    ID: Seed.knights[cityID][k]["knightId"],
                });
            }
        }
        knt = knt.sort(function sort(a, b) {
            a = parseInt(a['Combat']);
            b = parseInt(b['Combat']);
            return a == b ? 0 : (a > b ? -1 : 1);
        });
        if (knt[0]) return knt[0].ID;
        else return;
    },



    sendMarch: function(x, y) {
        var t = Tabs.Wilds;
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.cid = thief.city;
        params.type = 4;
        params.kid = t.getAtkKnight('city' + thief.city);
        params.xcoord = x;
        params.ycoord = y;
        params.u7 = thief.cavs;
        //params.u8 = thief.cavs;


        March.addMarch(params, function(rslt) {
            if (rslt.ok) {
                document.getElementById('flipresults').innerHTML = 'Search Complete<br> Found: ' + thief.data.length + 'Flipped: ' + thief.stolen + '<br>Marching to ' + x + ',' + y;

                return;
            } else { //onFailure
            }
        });
    },

    tiles: function(left, top, width, rslt) {
        var t = Tabs.Wilds;
        if (!thief.active) return;
        if (!rslt.ok) {
            setTimeout(function() {
                t.tcheck.request(left, top, MAP_SFIELD, t.tiles)
            }, MAP_DELAY);
            return;
        }
        if (rslt.error_code) {
            setTimeout(function() {
                t.tcheck.request(left, top, MAP_SFIELD, t.tiles)
            }, MAP_DELAY * 10);
            return;
        }
        var wild = rslt.data['l_' + thief.data[t.choice].x + '_t_' + thief.data[t.choice].y];
        if (rslt.userInfo['u' + wild.tileUserId].a == thief.targetally) {
            t.sendMarch(thief.data[t.choice].x, thief.data[t.choice].y);

        };

        thief.data.splice(t.choice, 1);
        t.savethief();
        return;

    },

    attack: function() {
        var t = Tabs.Wilds;
        if (!thief.active) return;
        t.dropwilds();
        if (!thief.donesearch) return;
        if (March.getEmptySlots < thief.minslots) return;
        if (unsafeWindow.seed.units['city' + thief.city].unt7 < thief.cav) return;
        if (thief.data.length > 0) {
            t.choice = Math.floor(thief.data.length * Math.random())
            logit('tiles');
            t.tcheck.request(thief.data[t.choice].x, thief.data[t.choice].y, MAP_SFIELD, t.tiles);
        } else {
            t.reset();
            setTimeout(function() {
                t.MapAjax.request(thief.xcoord, thief.ycoord, MAP_SFIELD, t.mapCallback)
            }, 30000);
        }
    },

    readthief: function() {
        var serverID = getServerId();
        s = GM_getValue('thief_' + Seed.player['name'] + '_' + serverID);
        if (s != null) {
            opts = JSON2.parse(s);
            for (k in opts) {
                if (matTypeof(opts[k]) == 'object') for (kk in opts[k])
                thief[k][kk] = opts[k][kk];
                else thief[k] = opts[k];
            }
        }
    },

    savethief: function() {
        var serverID = getServerId();
        setTimeout(function() {
            GM_setValue('thief_' + Seed.player['name'] + '_' + serverID, JSON2.stringify(thief));
        }, 0);
    },

}



function demist() {


    var uW = unsafeWindow;
    var CM = uW.cm;
    var Seed = uW.seed;


    // add a new option to the context menu
    uW.cm.ContextMenuMapController.prototype.MapContextMenus.City["5"].push("abcd");

    // add actions to the menu item
    var mod = new CalterUwFunc('cm.ContextMenuMapController.prototype.calcButtonInfo', [
        ['default:', 'case "abcd":' + '  b.text = "X-ray Vision"; b.color = "green"; ' + '  b.action = function () { ' + '    fetch_bm(e.tile.id,  e.tile.x, e.tile.y); ' + '  }; ' + '  d.push(b); break; ' + ' default: ']
    ]);

    mod.setEnable(true);

    // 
    uW.fetch_bm = function(tileId, tileX, tileY) {
        // add bookmark
        var params = uW.Object.clone(uW.g_ajaxparams);
        params.requestType = "BOOKMARK_LOCATION";
        params.tileId = tileId;
        params.bookmarkName = "City(" + tileX + ", " + tileY + ")";
        new uW.Ajax.Request(uW.g_ajaxpath + "ajax/tileBookmark.php" + uW.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function(message) {
                var rslt = eval("(" + message.responseText + ")");

                if (rslt.ok) {

                    // fetch data
                    fetch(tileX, tileY);
                }

                if (!rslt.ok) {
                    fetch(tileX, tileY);
                }
            },
        });
    }
};


//remove the bookmark
function removeBM(id1) {
    var uW = unsafeWindow;

    var id = id1.split("a")[1];
    var params = uW.Object.clone(uW.g_ajaxparams);
    params.requestType = "REMOVE_BOOKMARK";
    params.bookmarkId = id;
    new uW.Ajax.Request(uW.g_ajaxpath + "ajax/tileBookmark.php" + uW.g_ajaxsuffix, {
        method: "post",
        parameters: params,
    });
};

//get bookmark info
function fetch(tileX, tileY) {
    var uW = unsafeWindow;
    var CM = uW.cm;
    var Seed = uW.seed;
    var params = uW.Object.clone(uW.g_ajaxparams);
    params.requestType = "GET_BOOKMARK_INFO";
    new uW.Ajax.Request(uW.g_ajaxpath + "ajax/tileBookmark.php" + uW.g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function(message) {

            var cb = function(rslt, bookmark) {
                // handle the results

                if (!rslt.ok) {
                    return;
                }

                var u = rslt.userInfo[0];

                var a = 'None';
                if (u.allianceName) a = u.allianceName + ' (' + getDiplomacy(u.allianceId) + ')';

                var status = "";
                switch (parseInt(bookmark.cityStatus)) {
                case 1:
                    status = uW.g_js_strings.commonstr.normal;
                    break;
                case 2:
                    status = uW.g_js_strings.MapObject.begprotect;
                    break;
                case 3:
                    status = uW.g_js_strings.commonstr.truce;
                    break;
                case 4:
                    status = uW.g_js_strings.commonstr.vacation;
                    break;
                default:
                    status = uW.g_js_strings.commonstr.normal;
                }

                var n = '<div> <b>Name:</b> ' + u.genderAndName + '<br/><b>Might:</b> ' + addCommas(u.might) + '<br/><b>' + uW.g_js_strings.commonstr.alliance + ':</b> ' + a + '<br/><b>Location:</b> ' + bookmark.xCoord + ',' + bookmark.yCoord + '<br/><b>City name:</b> ' + bookmark.cityName + '<br/><b>Status:</b> ' + status + "</div>";

                unsafeWindow.Modal.showAlert(n);
            };

            var rslt = eval("(" + message.responseText + ")");

            if (rslt.ok) {
                var bookmarkInfo = rslt.bookmarkInfo;
                for (id in bookmarkInfo) {
                    var bm = bookmarkInfo[id];
                    if ((bm.xCoord == tileX) && (bm.yCoord == tileY)) {
                        if (bm.tileCItyId == null || bm.tileCItyId == 0) {
                            unsafeWindow.Modal.showAlert("<div>There is no longer a city at this location</div>");
                        } else {
                            fetchPlayerInfo(bm.tileUserId, function(r) {
                                cb(r, bm);
                            });
                        }
                        removeBM(id);
                    }
                }
            }
            if (!rslt.ok) {}
        },
        onFailure: function() {}
    });

};



function fetchPlayerInfo(uid, notify) {

    var uW = unsafeWindow;
    var CM = uW.cm;
    var Seed = uW.seed;
    var params = uW.Object.clone(uW.g_ajaxparams);
    params.uid = uid;
    new uW.Ajax.Request(uW.g_ajaxpath + "ajax/getUserGeneralInfo.php" + uW.g_ajaxsuffix, {
        method: "post",
        parameters: params,
        onSuccess: function(rslt) {
            notify(eval("(" + rslt.responseText + ")"));
        },
        onFailure: function(rslt) {
            notify({
                errorMsg: 'AJAX error'
            });
        },
    });
};



Tabs.farmreports = {
    tabLabel: 'Scout reports',
    tabOrder: 600000,
    deleting: false,
    tabDisabled: false,
    pageNo: 0,
    FROptions: {
        r1: 0,
        r2: 0,
        r3: 0,
        r4: 0,
        On: false,
        lost: false
    },
    rptstimer: null,
    delrptstimer: null,
    lrpts: null,
    myDiv: null,
    tocheck: new Array(),
    todelete: new Array(),
    init: function(div) {
        var t = Tabs.farmreports;
        t.readSROpts();
        t.myDiv = div;
        var m = '<DIV class=pbStat>Delete Scout Reports</div><br>';
        if (t.FROptions.On) {
            m += '<INPUT id=FSrpts type=submit value="Auto Delete Scout Reports = On">';
        } else {
            m += '<INPUT id=FSrpts type=submit value="Auto Delete Scout Reports = OFF">';
        }
        m += '<br> 0 to disable the particular check';
        m += '<br>Don\'t delete scout reports ';
        m += '<table><tr><td alight="right"> If Food > </td><td><INPUT id=frR1 type=text value=' + t.FROptions.r1 + '></td></tr>';
        m += '<tr><td alight="right"> or if Wood > </td><td><INPUT id=frR2 type=text value=' + t.FROptions.r2 + '></td></tr>';
        m += '<tr><td alight="right"> or if Stone > </td><td><INPUT id=frR3 type=text value=' + t.FROptions.r3 + '></td></tr>';
        m += '<tr><td alight="right"> or if Ore > </td><td><INPUT id=frR4 type=text value=' + t.FROptions.r4 + '></td></tr></table>';
        m += '<input id=overwhelmed type=checkbox ' + (t.FROptions.lost ? 'CHECKED' : '') + '> Delete reports where you were overwhelmed in battle';
        t.myDiv.innerHTML = m;
        document.getElementById('frR1').addEventListener('change', function() {
            t.FROptions.r1 = this.value;
            t.saveSROpts();
        }, false);
        document.getElementById('frR2').addEventListener('change', function() {
            t.FROptions.r2 = this.value;
            t.saveSROpts();
        }, false);

        document.getElementById('frR3').addEventListener('change', function() {
            t.FROptions.r3 = this.value;
            t.saveSROpts();
        }, false);

        document.getElementById('frR4').addEventListener('change', function() {
            t.FROptions.r4 = this.value;
            t.saveSROpts();
        }, false);
        document.getElementById('overwhelmed').addEventListener('click', function() {
            t.FROptions.lost = this.checked;
            t.saveSROpts();
        }, false);
        document.getElementById('FSrpts').addEventListener('click', function() {
            t.e_toggleswitch(this)
        }, false);
        setTimeout(t.startdeletereports, 10);
    },
    e_toggleswitch: function(obj) {
        var t = Tabs.farmreports;
        if (t.FROptions.On) {
            obj.value = "Auto Delete Scout Reports = Off";
            t.deleting = false;
            t.FROptions.On = false;
            clearInterval(t.rptstimer);
            // clearInterval(t.delrptstimer);
            clearInterval(t.lrpts);
        } else {
            obj.value = "Auto Delete Scout Reports = On";
            t.FROptions.On = true;
            t.startdeletereports();
        }
        t.saveSROpts();
    },
    startdeletereports: function() {
        var t = Tabs.farmreports;
        if (!t.deleting && t.FROptions.On) {
            t.deleting = true;
            t.pageNo = 0;
            t.listreport(t.checkreports);
            t.lrpts = setInterval(function() {
                t.listreport(t.checkreports)
            }, 10 * 60000);
            t.rptstimer = setInterval(t.fetchreports, 6000)
            //t.delrptstimer = setInterval(t.deleteCheckedReports,60000);
        }
    },

    listreport: function(callback) {
        var t = Tabs.farmreports;
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        if (t.pageNo > 1) params.pageNo = t.pageNo;
        else t.tocheck = new Array();
        new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/listReports.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function(rslt) {
                callback(rslt);
            },
            onFailure: function() {
                callback();
            },
        });
    },

    checkreports: function(rslt) {
        var t = Tabs.farmreports;
        if (!rslt.ok) {
            t.pageNo = 0;
            t.deleting = false;
            return;
        }
        if (rslt.arReports.length < 1) {
            t.pageNo = 0;
            t.deleting = false;
            return;
        }
        var reports = rslt.arReports;
        var totalPages = rslt.totalPages;
        if (rslt.totalPages > 30) var totalPages = 30;
        for (k in reports) {
            if (t.FROptions.On) {
                if (reports[k].marchType == 3 && t.isMyself(reports[k].side1PlayerId)) {
                    t.tocheck.push(k.substr(2));
                };
                if (reports[k].side0PlayerId == 0) {
                    logit('side0player 0 detected');
                    // t.deleteCheckedReport(k.substr(2));
                };
            }
        };
        if (t.pageNo < 30 && t.pageNo < totalPages) {
            t.pageNo++;
            setTimeout(function() {
                t.listreport(t.checkreports)
            }, 7000);
        } else {
            t.pageNo = 0;
            t.deleting = false;
        };
    },
    //&s0rids=&s1rids=193634052&cityrids=
    deleteCheckedReports: function() {
        var t = Tabs.farmreports;
        if (t.todelete.length > 0) {
            var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
            params.s0rids = '';
            params.s1rids = t.todelete.join(",");
            params.cityrids = '';
            new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/deleteCheckedReports.php" + unsafeWindow.g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function(rslt) {},
            });
        };
    },
    deleteCheckedReport: function(rpt) {
        var t = Tabs.farmreports;
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.s0rids = '';
        params.s1rids = rpt;
        t.todelete = new Array();
        params.cityrids = '';
        new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/deleteCheckedReports.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function(rslt) {},
        });
    },
    isMyself: function(userID) {
        var t = Tabs.farmreports;
        if (!Seed.players["u" + userID]) return false;
        if (Seed.players["u" + userID].n == Seed.player.name) return true;
        else return false;
        return false;
    },


    fetchreports: function() {
        var t = Tabs.farmreports;
        if (t.tocheck.length > 0) {
            rpId = t.tocheck.shift();
            var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
            params.rid = rpId;
            params.side = 1;
            new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/fetchReport.php" + unsafeWindow.g_ajaxsuffix, {
                method: "post",
                parameters: params,
                onSuccess: function(rslt) {
                    var x = {};
                    if (rslt.overwhelmed == true && t.FROptions.lost == true) {
                        logit('deleting ' + rpId);
                        t.deleteCheckedReport(rpId);
                        return;
                    };
                    if (rslt.rsc) {
                        var rsc = rslt.rsc;
                        var topush = true;
                        if (Number(t.FROptions.r1) > 0) {
                            if (Number(rsc.r1) > Number(t.FROptions.r1)) {
                                logit("food is more than " + rpId);
                                logit(Number(rsc.r1) + ' > ' + Number(t.FROptions.r1));
                                topush = false;
                            };
                        };

                        if (Number(t.FROptions.r2) > 0) {
                            if (Number(rsc.r2) > Number(t.FROptions.r2)) {
                                logit("wood is more than " + rpId);
                                logit(Number(rsc.r2) + ' > ' + Number(t.FROptions.r2));
                                topush = false;
                            };
                        };
                        if (Number(t.FROptions.r3) > 0) {
                            if (Number(rsc.r3) > Number(t.FROptions.r3)) {
                                logit("stone is more than " + rpId);
                                logit(Number(rsc.r3) + ' > ' + Number(t.FROptions.r3));
                                topush = false;
                            };
                        };

                        if (Number(t.FROptions.r4) > 0) {
                            if (Number(rsc.r4) > Number(t.FROptions.r4)) {
                                logit("ore is more than " + rpId);
                                logit(Number(rsc.r4) + ' > ' + Number(t.FROptions.r4));
                                topush = false;
                            };
                        };

                        if (topush == true) {
                            t.deleteCheckedReport(rpId);
                            logit('deleting ' + rpId);
                        } else logit(' found a good one ' + rpId);





                    };

                },
                onFailure: function(rslt) {

                },
            }, false);
        };
    },


    saveSROpts: function() {
        var t = Tabs.farmreports;
        var serverID = getServerId();
        setTimeout(function() {
            GM_setValue('SROpts_' + Seed.player['name'] + '_' + serverID, JSON2.stringify(t.FROptions));
        }, 0);
    },
    readSROpts: function() {
        var t = Tabs.farmreports;
        var serverID = getServerId();
        s = GM_getValue('SROpts_' + Seed.player['name'] + '_' + serverID);
        if (s != null) {
            opts = JSON2.parse(s);
            for (k in opts) {
                if (matTypeof(opts[k]) == 'object') for (kk in opts[k])
                t.FROptions[k][kk] = opts[k][kk];
                else t.FROptions[k] = opts[k];
            }
        }
    },
    show: function() {
        var t = Tabs.farmreports;

    },
    hide: function() {
        var t = Tabs.farmreports;
    },

};



/****************************  Guardian Tab  ******************************/
Tabs.gbld = {
    tabOrder: 40003, // order to place tab in top bar
    tabLabel: 'Guardbld', // label to show in main window tabs
    myDiv: null,
    timer: null,

    init: function(div) { // called once, upon script startup
        var t = Tabs.gbld;
        t.myDiv = div;
        var m = '<DIV class=pbStat>Guardian build cheat</div><TABLE class=pbTab width=100% height=0% ><TR align="center">';
        m += '<table><tr><td><select id=gbldcity><option value =-1>---</option>';
        for (var k in Cities.byID)
        m += '<option value="' + Cities.byID[k].id + '">' + Cities.byID[k].name + '</option>'
        m += '</select></td>';
        m += '<td><select id=guardcity type=list><option value=-1>---</option></select></td>';
        m += '<td><input type=button value=Build id=ghackb>';
        m += '</td><td>Experimental and does use items to build.  Will take an hour or more for guardians to show up.</td></tr></table>';
        //&ctrl=Guardian&action=build&cityId=40139&type=ore&permission=1

        //contruct  k&cid=42726&bid=7118211&pos=15&lv=10&type=14&permission=1
        t.myDiv.innerHTML = m;
        document.getElementById('ghackb').addEventListener('click', t.build, false);
        document.getElementById('gbldcity').addEventListener('change', function() {

            var guardcity = document.getElementById("guardcity");
            while (guardcity.options.length) guardcity.remove(0);
            var o = document.createElement("option");
            o.text = "---";
            o.value = -1;
            guardcity.options.add(o);
            if (this.value == -1) return;
            var idx = Cities.byID[this.value].idx;
            var guards = Seed.guardian[idx].cityGuardianLevels;
            for (i in guards) {
                var o = document.createElement("option");
                o.text = i;
                o.value = i;
                guardcity.options.add(o);
            };
        }, false);

        //document.getElementById('pbSpamEnable').addEventListener ('click', function(){t.toggleon(this);}, false);
        //document.getElementById('pbSpamAd').addEventListener ('change', t.e_spamOptChanged, false);
        //document.getElementById('pbSpamMin').addEventListener ('change', t.e_spamOptChanged, false);
        //document.getElementById('pbSpamState').addEventListener ('click', function(){t.togglespam(this);}, false);
    },
    build: function() {

        var guardtype = {
            "wood": 50,
            "ore": 51,
            "food": 52,
            "stone": 53
        };
        var cityID = document.getElementById('gbldcity').value;
        logit('cityid ' + cityID);
        if (cityID == -1) return;
        var guard = document.getElementById('guardcity').value;
        logit('guard ' + guard);
        if (guard == -1) return;
        var idx = Cities.byID[cityID].idx;
        logit('idx' + idx);
        var ginfo = Seed.guardian[idx];
        var btype = guardtype[guard];
        logit('btype ' + btype);

        //var level = Seed.guardian[idx].cityGuardianLevels[guard];

        /**
	                pos500 to pos503
wood type 50
stone type 53
food 52
ore 51
Seed.buildings.city42726.pos503
tring) 0 = 53
(string) 1 = 12
(string) 2 = 503
(string) 3 = 3835637




(number) id = 53
(number) level = 12
(boolean) isPrestige = false


string) cityId = 42727
(string) level = 10
(boolean) upgrading = false
(number) timeLeft = 0
(string) type = ore
(number) guardianCount = 4
(object) cityGuardianLevels = [object Object]
Seed.guardian[1];
Seed.guardian[1].cityGuardianLevels
(string) wood = 9
(string) ore = 10
(string) food = 9
(string) stone = 12

**/
        //contruct  k&cid=42726&bid=7118211&pos=15&lv=10&type=14&permission=1
        var buildings = Seed.buildings['city' + cityID];
        var citpos = null;
        var bid = null;
        var level = null;
        for (i in buildings) {
            if (buildings[i][0] == btype) {
                citpos = buildings[i][2];
                bid = buildings[i][3];
                level = buildings[i][1];
                logit(inspect(buildings[i]));
                break;
            };

        };
        logit('level ' + level);
        var params = unsafeWindow.Object.clone(unsafeWindow.g_ajaxparams);
        params.cid = cityID;
        params.bid = "";
        params.pos = citpos;
        params.lv = Number(level) + 1;
        if (params.lv > 1) {
            params.bid = bid;
        }
        params.type = btype;
        if (params.lv > 9) params.permission = 1;
        new MyAjaxRequest(unsafeWindow.g_ajaxpath + "ajax/construct.php" + unsafeWindow.g_ajaxsuffix, {
            method: "post",
            parameters: params,
            onSuccess: function(rslt) {
                alert(inspect(rslt));
            },
        });


    },
    hide: function() { // called whenever the main window is hidden, or another tab is selected
        var t = Tabs.gbld;
    },

    show: function() { // called whenever this tab is shown
        var t = Tabs.gbld;

    },

};
setTimeout(function() {
    logit('Ness loaded v26')
}, 10000);
